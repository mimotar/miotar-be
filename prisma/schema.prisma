// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  name                String?
  profile             Profile?
  password            String                @db.Text()
  personalAccessToken PersonalAccessToken[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt()
  deletedAt           DateTime?

  @@map("users")
}

model Profile {
  id               Int               @id @default(autoincrement())
  userId           Int               @unique
  role             UserRoleEnum      @default(USER)
  user             User              @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  verificationCode String            @unique
  status           AccountStatusEnum @default(PENDING)
  emailVerifyAt    DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt()

  @@map("profiles")
}

model PersonalAccessToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @db.Text()
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  expireAt  DateTime
  user      User     @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)

  @@map("personal_access_tokens")
}

model PasswordResetToken {
  id        Int                          @id @default(autoincrement())
  email     String
  token     String                       @unique
  status    PasswordResetTokenStatusEnum @default(ACTIVE)
  expireAt  DateTime
  createdAt DateTime                     @default(now())

  @@map("password_reset_tokens")
}

enum UserRoleEnum {
  USER
  ADMIN
}

enum AccountStatusEnum {
  PENDING
  ACTIVE
  SUSPENDED
  DELETED
}

enum PasswordResetTokenStatusEnum {
  ACTIVE
  INACTIVE
}
